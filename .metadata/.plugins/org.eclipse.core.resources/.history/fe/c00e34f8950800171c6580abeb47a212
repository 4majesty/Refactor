package org.eclipse.jdt.internal.corext.refactoring.structure;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.OperationCanceledException;
import org.eclipse.ltk.core.refactoring.Change;
import org.eclipse.ltk.core.refactoring.RefactoringStatus;
import org.eclipse.jdt.core.dom.FieldAccess;
import org.eclipse.jdt.core.dom.FieldDeclaration;
import org.eclipse.jdt.core.dom.SimpleName;
import org.eclipse.jdt.internal.corext.refactoring.ParameterInfo;
import org.eclipse.jdt.internal.corext.util.Messages;
import org.eclipse.jdt.internal.ui.JavaPlugin;
import org.eclipse.jdt.internal.ui.text.correction.ASTResolving;
import org.eclipse.jdt.internal.ui.viewsupport.BasicElementLabels;
import org.eclipse.jdt.internal.corext.refactoring.util.ITextChangeManager;

public interface IExtractClassRefactoring {
	RefactoringStatus validateClassName();

	RefactoringStatus validateTopLevel();

	RefactoringStatus validateParameterName();

	RefactoringStatus validateFields();

	RefactoringStatus validateAll();

	boolean visit(FieldAccess node);

	boolean visit(SimpleName node);

	boolean hasFieldReference();

	RefactoringStatus checkInitialConditions(IProgressMonitor pm) throws CoreException, OperationCanceledException;

	RefactoringStatus checkFinalConditions(IProgressMonitor pm) throws CoreException, OperationCanceledException;

	Change createChange(IProgressMonitor pm) throws CoreException, OperationCanceledException;

	void fieldCreated(CompilationUnitRewrite cuRewrite, FieldDeclaration field, ParameterInfo pi);

	boolean isCreateSetter(ParameterInfo pi);

	boolean isUseInConstructor(ParameterInfo pi);

	String getName();

	Object getAdapter(Class adapter);
}
