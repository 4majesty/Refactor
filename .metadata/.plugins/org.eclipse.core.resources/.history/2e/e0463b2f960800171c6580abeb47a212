package org.eclipse.jdt.internal.corext.refactoring.code;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.ltk.core.refactoring.Change;
import org.eclipse.ltk.core.refactoring.RefactoringStatus;
import org.eclipse.jdt.core.dom.SimpleName;
import org.eclipse.jdt.internal.corext.fix.LinkedProposalModel;
import org.eclipse.jdt.ui.JavaElementLabels;
import org.eclipse.jdt.internal.ui.JavaPlugin;
import org.eclipse.jdt.internal.ui.text.correction.ASTResolving;
import org.eclipse.jdt.internal.ui.viewsupport.BasicElementLabels;
import org.eclipse.jdt.internal.ui.viewsupport.BindingLabelProvider;
import org.eclipse.jdt.internal.corext.refactoring.structure.ICompilationUnitRewrite;

public interface IExtractTempRefactoring {
	boolean isReferringToForVariable();

	boolean visit(SimpleName node);

	void setCheckResultForCompileProblems(boolean checkResultForCompileProblems);

	void setLinkedProposalModel(LinkedProposalModel linkedProposalModel);

	RefactoringStatus checkFinalConditions(IProgressMonitor pm) throws CoreException;

	RefactoringStatus checkInitialConditions(IProgressMonitor pm) throws CoreException;

	RefactoringStatus checkTempName(String newName);

	Change createChange(IProgressMonitor pm) throws CoreException;

	boolean declareFinal();

	String getName();

	String guessTempName();

	String[] guessTempNames();

	boolean replaceAllOccurrences();

	void setDeclareFinal(boolean declareFinal);

	void setReplaceAllOccurrences(boolean replaceAllOccurrences);

	void setTempName(String newName);
}
