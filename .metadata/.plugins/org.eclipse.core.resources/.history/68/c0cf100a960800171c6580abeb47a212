package org.eclipse.jdt.internal.corext.refactoring.code;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import org.eclipse.core.runtime.Assert;
import org.eclipse.jdt.core.dom.ASTMatcher;
import org.eclipse.jdt.core.dom.ASTNode;
import org.eclipse.jdt.core.dom.AbstractTypeDeclaration;
import org.eclipse.jdt.core.dom.AnnotationTypeDeclaration;
import org.eclipse.jdt.core.dom.AnonymousClassDeclaration;
import org.eclipse.jdt.core.dom.Assignment;
import org.eclipse.jdt.core.dom.EnumDeclaration;
import org.eclipse.jdt.core.dom.IBinding;
import org.eclipse.jdt.core.dom.IVariableBinding;
import org.eclipse.jdt.core.dom.MethodDeclaration;
import org.eclipse.jdt.core.dom.SimpleName;
import org.eclipse.jdt.core.dom.TypeDeclaration;
import org.eclipse.jdt.internal.corext.dom.ASTNodes;
import org.eclipse.jdt.internal.corext.dom.Bindings;
import org.eclipse.jdt.internal.corext.dom.GenericVisitor;

public interface ISnippetFinder {
	void add(ASTNode node);

	boolean hasCorrectNesting(ASTNode node);

	ASTNode[] getNodes();

	void addLocal(IVariableBinding org, SimpleName local);

	SimpleName getMappedName(IVariableBinding org);

	IVariableBinding getMappedBinding(IVariableBinding org);

	boolean isEmpty();

	boolean isMethodBody();

	MethodDeclaration getEnclosingMethod();

	boolean match(SimpleName candidate, Object s);

	boolean visit(TypeDeclaration node);

	void endVisit(TypeDeclaration node);

	boolean visit(EnumDeclaration node);

	void endVisit(EnumDeclaration node);

	boolean visit(AnnotationTypeDeclaration node);

	void endVisit(AnnotationTypeDeclaration node);
}
