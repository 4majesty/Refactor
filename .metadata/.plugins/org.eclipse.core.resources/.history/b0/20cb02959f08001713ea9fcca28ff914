package com.successfactors.cdp.ui.controller;

import com.successfactors.ajaxservice.annotation.AjaxMethod;
import com.successfactors.ajaxservice.annotation.AjaxService;
import com.successfactors.cdp.service.GetRecommendedSuccessors;
import com.successfactors.cdp.service.GetRoleReadiness;
import com.successfactors.cdp.ui.util.CWSV12ViewConstants;
import com.successfactors.edu.ui.controller.exception.AjaxInternalServerError;
import com.successfactors.i18n.service.IMessageBundle;
import com.successfactors.legacy.bean.PermissionBean;
import com.successfactors.legacy.bean.PermissionListBean;
import com.successfactors.legacy.bean.provisioning.FeatureEnum;
import com.successfactors.legacy.util.SerializationException;
import com.successfactors.legacy.util.json.JSONObjectOutput;
import com.successfactors.legacy.util.permission.PermissionUtils;
import com.successfactors.logging.api.LogManager;
import com.successfactors.logging.api.Logger;
import com.successfactors.notification.utils.JSONSerilizationUtils;
import com.successfactors.platform.bean.ParamBean;
import com.successfactors.platform.di.SFContextConstant;
import com.successfactors.sca.ServiceApplicationException;
import com.successfactors.sca.ServiceCommandHandler;
import org.jboss.seam.ScopeType;
import org.jboss.seam.annotations.In;
import org.jboss.seam.annotations.Name;
import org.jboss.seam.annotations.Scope;

import javax.inject.Inject;
import java.io.Serializable;
import java.util.Set;

@AjaxService
@Name("cdpReadinessController")
@javax.inject.Named("cdpReadinessController")
@Scope(ScopeType.EVENT)
@org.springframework.context.annotation.Scope(SFContextConstant.SCOPE_EVENT)
public class CDPReadinessController implements Serializable {
  private static final int DEFAULT_MAX_RETURN_SIZE = 10;
  
  @Inject
  @In
  private transient ServiceCommandHandler scaHandler;
  
  private static final long serialVersionUID = 1L;
  /** logger. */
  private static Logger logger = LogManager.getLogger();
  /**
   * ParamBean in session.
   */
  @Inject
  @In(value = "params")
  private ParamBean params;
  
  @Inject
  @In(value=PermissionUtils.PERMISSION_LIST_BEAN)
  private PermissionListBean permList;
  
  /** SFMessages. */
  @Inject
  @In(create = true, value = "v10msgs")
  private IMessageBundle msgs;
  
  @Inject
  @In(create = true, value = "v10msgs")
  private IMessageBundle v10msgs;
  
  @AjaxMethod
  public String getUserReadiness(String userId, long roleId) throws AjaxInternalServerError {
    JSONObjectOutput output = new JSONObjectOutput();
    GetRoleReadiness cmd = new GetRoleReadiness(userId, roleId);
    boolean cwsEnabled = params.isFeatureExist(FeatureEnum.CAREER_WORKSHEET) || params.isFeatureExist(FeatureEnum.CAREER_WORKSHEET_V12);
    
    if(cwsEnabled) {
      try {
        cmd = scaHandler.execute(cmd);
        output.put(CWSV12ViewConstants.JSON_KEY_SUCCESS, true);
        JSONObjectOutput readinessOutput = new JSONObjectOutput();
        boolean needDisplay = cmd.isDisplay();
        readinessOutput.put("display", needDisplay);
        if(needDisplay) {
          readinessOutput.put("value", cmd.getReadiness());
        }
        output.put("readiness", readinessOutput);
      } catch (ServiceApplicationException e) {
        logger.error("getUserReadiness error:" + e);
        output.put(CWSV12ViewConstants.JSON_KEY_SUCCESS, false);
        output.put(CWSV12ViewConstants.JSON_KEY_MESSAGE, msgs.getString("DEVELOPMENT_ERR_INTERNAL"));
      }
    } else {
      logger.error("CDPReadinessController getUserReadiness error: CWS is not enabled.");
      output.put(CWSV12ViewConstants.JSON_KEY_SUCCESS, false);
      output.put(CWSV12ViewConstants.JSON_KEY_MESSAGE, msgs.getString("DEVELOPMENT_CDP_NO_PERMISSION_TO_ACCESS"));
    }
    try {
      return JSONSerilizationUtils.toJSON(output);
    } catch (SerializationException e) {
      throw new AjaxInternalServerError(e.getMessage());
    }
  }
  
  /**
   * Get recommended successors for one position/role
   * Position id is not ready for use now.
   * @param positionId
   * @param roleId
   * @param excludedUserIds
   * @return
   * @throws AjaxInternalServerError 
   */
  @AjaxMethod
  public String getRecommendedSuccessors(long positionId, long roleId, Set<String> excludedUserIds) throws AjaxInternalServerError {
    JSONObjectOutput output = new JSONObjectOutput();
    if(isGetRecommendedSuccessorsPermitted()) {
      GetRecommendedSuccessors cmd = new GetRecommendedSuccessors();
      cmd.setRoleId(roleId);
      cmd.setExcludedUserIds(excludedUserIds);
      cmd.setMaxReturnSize(DEFAULT_MAX_RETURN_SIZE);
      try {
        cmd = scaHandler.execute(cmd);
        
        output.put(CWSV12ViewConstants.JSON_KEY_SUCCESS, true);
        output.put("successors", cmd.getUserReadinessList());
      } catch (ServiceApplicationException e) {
        logger.error("getRecommendedSuccessors error:" + e);
        output.put(CWSV12ViewConstants.JSON_KEY_SUCCESS, false);
        output.put(CWSV12ViewConstants.JSON_KEY_MESSAGE, msgs.getString("DEVELOPMENT_ERR_INTERNAL"));
      }
    } else {
      output.put(CWSV12ViewConstants.JSON_KEY_SUCCESS, false);
      output.put(CWSV12ViewConstants.JSON_KEY_MESSAGE, msgs.getString("DEVELOPMENT_CDP_NO_PERMISSION_TO_ACCESS"));
    }
    try {
      return JSONSerilizationUtils.toJSON(output);
    } catch (SerializationException e) {
      throw new AjaxInternalServerError(e.getMessage());
    }
  }
  
  @AjaxMethod
  public boolean isGetRecommendedSuccessorsPermitted() {
    if(permList == null || params == null) {
      return false;
    }
    
    boolean recommendedSuccessorsPermitted =
        permList.hasPermission(PermissionBean.CDP_ACCESS, PermissionBean.CDP_SCM_RECOMMENDED_SUCCESSORS_ACCESS, 0);
    boolean cwsEnabled = params.isFeatureExist(FeatureEnum.CAREER_WORKSHEET) || params.isFeatureExist(FeatureEnum.CAREER_WORKSHEET_V12);
    
    if(recommendedSuccessorsPermitted && cwsEnabled) {
      return true;
    }
    
    return false;
  }
}
