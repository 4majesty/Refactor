package org.eclipse.jdt.internal.ui.javaeditor;

import java.util.List;
import org.eclipse.jface.text.DocumentEvent;
import org.eclipse.jface.text.IDocument;
import org.eclipse.jface.text.ITextPresentationListener;
import org.eclipse.jface.text.Position;
import org.eclipse.jface.text.Region;
import org.eclipse.jface.text.TextPresentation;
import org.eclipse.jdt.internal.ui.JavaPlugin;
import org.eclipse.jdt.internal.ui.javaeditor.SemanticHighlightingManager.HighlightedPosition;
import org.eclipse.jdt.internal.ui.javaeditor.SemanticHighlightingManager.Highlighting;
import org.eclipse.jdt.internal.ui.text.JavaPresentationReconciler;

public interface ISemanticHighlightingPresenter {
	void update(DocumentEvent event);

	HighlightedPosition createHighlightedPosition(int offset, int length, Highlighting highlighting);

	void addAllPositions(List list);

	TextPresentation createPresentation(List addedPositions, List removedPositions);

	Runnable createUpdateRunnable(final TextPresentation textPresentation, List addedPositions, List removedPositions);

	void updatePresentation(TextPresentation textPresentation, HighlightedPosition[] addedPositions, HighlightedPosition[] removedPositions);

	void applyTextPresentation(TextPresentation textPresentation);

	void inputDocumentAboutToBeChanged(IDocument oldInput, IDocument newInput);

	void inputDocumentChanged(IDocument oldInput, IDocument newInput);

	void documentAboutToBeChanged(DocumentEvent event);

	void documentChanged(DocumentEvent event);

	boolean isCanceled();

	void setCanceled(boolean isCanceled);

	void install(JavaSourceViewer sourceViewer, JavaPresentationReconciler backgroundPresentationReconciler);

	void uninstall();

	void highlightingStyleChanged(Highlighting highlighting);
}
