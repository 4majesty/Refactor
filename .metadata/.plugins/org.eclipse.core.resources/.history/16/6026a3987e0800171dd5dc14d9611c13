package com.successfactors.platform.ui.login.determinator;

import org.jboss.seam.mock.SeamTest;
import org.testng.Assert;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import com.mockobjects.servlet.MockHttpServletRequest;
import com.successfactors.platform.bean.CompanyBean;
import com.successfactors.legacy.bean.provisioning.FeatureEnum;
import com.successfactors.platform.bean.ParamBean;
import com.successfactors.legacy.bean.PermissionListBean;
import com.successfactors.legacy.service.ejb.SysConfig;
import com.successfactors.platform.ui.servlet.SessionConstants;
import com.successfactors.deeplink.ui.util.DeepLinkServlet;
import com.successfactors.xi.ui.controller.topnav.TopNavBarViewEnum;
import com.successfactors.platform.ui.topnav.tabcreator.CompanyTabCreator;
import com.successfactors.platform.ui.controller.GrantedAdminPermissionsController;
import com.successfactors.platform.util.UIVersionManager.UIVersion;

public class PasswordChangeEndpointDeterminatorTest extends SeamTest{
    
    ParamBean params = new ParamBean();
    CompanyBean cbean;
    EndPointContext context;
    SysConfig config;
    
    FeatureEnum selectedFeature = null;

    @BeforeMethod(groups={"checkin"}) 
    public void beforeTest(){
        cbean = new CompanyBean(){
            @Override
            public boolean isFeatureExist(FeatureEnum feature) {
                return getFeatureSet().contains(feature);
            }
        };   
           
        context = new EndPointContext();
        context.setRequest(new MockHttpServletRequest());
        
        params.setCompanyBean(cbean);
       
    }
    
    
    @Test(groups={"checkin", "broken", "scaconverter"})
    public void testPasswdOk() throws Exception
    {

        PasswordChangeEndpointDeterminator pcd = new PasswordChangeEndpointDeterminator();

        setField(pcd, "params", params);
        setField(pcd, "companybean", cbean);
        
        String result = pcd.determine(UIVersion.V10, context);
        assert result == null;
        
        result = pcd.determine(UIVersion.V11, context);
        assert result == null;
        
    }
    
    @Test(groups={"checkin", "broken", "scaconverter"})
    public void testPasswdExpire() throws Exception
    {

        PasswordChangeEndpointDeterminator pcd = new PasswordChangeEndpointDeterminator();

        setField(pcd, "params", params);
        setField(pcd, "companybean", cbean);
        setField(pcd, "passwordOk", "false");
        
        String result = pcd.determine(UIVersion.V10, context);
        assert result != null;
        assert result.equals("/acme");
        
        
        result = pcd.determine(UIVersion.V11, context);
        assert result != null;
        assert result.equals(DeepLinkServlet.PREFIX + "/home");
        
        
        result = pcd.determine(UIVersion.OTHER, context);
        assert result != null;
        assert result.equals("/options");
        
    }
    
  


}
