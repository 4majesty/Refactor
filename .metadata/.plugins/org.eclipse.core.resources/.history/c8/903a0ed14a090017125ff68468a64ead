package com.successfactors.cdp.service.mentoring.jam.impl;

import static com.successfactors.unittest.TestUtils.setField;

import java.io.IOException;
import java.util.List;
import java.util.Locale;

import org.apache.http.HttpStatus;
import org.apache.http.message.BasicNameValuePair;
import org.jmock.Mockery;
import org.jmock.lib.legacy.ClassImposteriser;
import org.testng.Assert;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import com.successfactors.cdp.bean.mentoring.jam.Member;
import com.successfactors.cdp.service.mentoring.jam.FindJamMemberBySyncId;
import com.successfactors.cdp.service.mentoring.jam.exception.JamAuthenticationException;
import com.successfactors.cdp.service.mentoring.jam.util.BasicHttpResponse;
import com.successfactors.platform.bean.ParamBean;
import com.successfactors.sca.ServiceApplicationException;
import com.successfactors.sca.ServiceCommandHandler;
import com.successfactors.unittest.TestUtils;

public class FindJamMemberBySyncIdImplTest {
  private Mockery context;

  private ParamBean params;

  private ServiceCommandHandler scaHandler;

  private static final String JAM_BASE_URL = "https://stage.sapjam.com";
  
  private static final String ACCESS_TOKEN = "test_access_token";

  private static final String MEMBER_ID = "test_member_id";
  
  private static final String TEST_MEMBER_JSON_FILE_PATH = "jam/test-member.json";

  final public ParamBean getDefaultParam() {
    if (params == null) {
        params = new ParamBean();
        params.setCompanyId("ABCINC");
        params.setUserId("user1");
        params.setDateFormat("mm/dd/yyyy");
        params.setLocale(Locale.ENGLISH);
    }

    return params;
  }
  
  @BeforeMethod(groups = { "checkin" })
  public void setUp() throws Exception {
    context = new Mockery();
    context.setImposteriser(ClassImposteriser.INSTANCE);

    this.params = this.getDefaultParam();
    this.scaHandler = context.mock(ServiceCommandHandler.class);
  }

  private void setAttributes(MockFindJamMemberBySyncIdImpl service) {
    setField(service, "params", this.params);
    setField(service, "scaHandler", this.scaHandler);
  }

  @Test(groups = { "checkin" })
  public void testSuccessResponse() throws ServiceApplicationException  {
    MockFindJamMemberBySyncIdImpl service = new MockFindJamMemberBySyncIdImpl(HttpStatus.SC_OK);

    setAttributes(service);
    Member member = service.execute(new FindJamMemberBySyncId(MEMBER_ID));

    Assert.assertTrue(member != null);
    Assert.assertTrue(member.getMemberId() != null);
    Assert.assertTrue(member.getMemberId().trim().length() > 0);
  }

  @Test(groups = { "checkin" })
  public void testwithAccessToken() throws ServiceApplicationException  {
    MockFindJamMemberBySyncIdImpl service = new MockFindJamMemberBySyncIdImpl(HttpStatus.SC_OK);

    setAttributes(service);
    Member member = service.execute(new FindJamMemberBySyncId(MEMBER_ID,ACCESS_TOKEN));

    Assert.assertTrue(member != null);
    Assert.assertTrue(member.getMemberId() != null);
    Assert.assertTrue(member.getMemberId().trim().length() > 0);
  }

  @Test(groups = { "checkin" })
  public void testAuthFailure() throws ServiceApplicationException {
    MockFindJamMemberBySyncIdImpl service = new MockFindJamMemberBySyncIdImpl(HttpStatus.SC_FORBIDDEN);

    setAttributes(service);

    boolean authFailureException = false;

    try {
      service.execute(new FindJamMemberBySyncId(MEMBER_ID));
    } catch(JamAuthenticationException e) {
      authFailureException = true;
    }

    Assert.assertTrue(authFailureException);
  }

  @Test(groups = { "checkin" })
  public void testServiceUnavailable() {
    MockFindJamMemberBySyncIdImpl service = new MockFindJamMemberBySyncIdImpl(HttpStatus.SC_SERVICE_UNAVAILABLE);

    setAttributes(service);

    boolean serviceUnavailableException = false;

    try {
      service.execute(new FindJamMemberBySyncId(MEMBER_ID));
    } catch(ServiceApplicationException e) {
      serviceUnavailableException = true;
    }

    Assert.assertTrue(serviceUnavailableException);
  }

  private class MockFindJamMemberBySyncIdImpl extends FindJamMemberBySyncIdImpl {
    
    private int responseCode;

    public MockFindJamMemberBySyncIdImpl(int responseCode) {
      this.responseCode = responseCode;
    }

    @Override
    protected BasicHttpResponse invoke(String url, String requestType,
        List<BasicNameValuePair> headers) {
      // TODO Auto-generated method stub
      return mockInvoke();
    }

    @Override
    protected BasicHttpResponse invoke(String url,String requestType,
      List<BasicNameValuePair> headers,String body) {
      return mockInvoke();
    }

    private BasicHttpResponse mockInvoke() {
      switch (responseCode) {
      case HttpStatus.SC_OK:
        return getMockSuccessResponse();
      case HttpStatus.SC_FORBIDDEN:
        return getMockForbiddenResponse();
      default:
        return getMockDefaultFailureResponse();
      }
    }

    private BasicHttpResponse getMockSuccessResponse() {
      byte[] payloadBytes;

      try {
        payloadBytes = TestUtils.readTestData(TEST_MEMBER_JSON_FILE_PATH);
      } catch (IOException e) {
        e.printStackTrace();
        return null;
      }

      String payload = new String(payloadBytes);

      return new BasicHttpResponse(HttpStatus.SC_OK,null,payload);
    }

    private BasicHttpResponse getMockForbiddenResponse() {
      return new BasicHttpResponse(HttpStatus.SC_FORBIDDEN,null,null);
    }

    private BasicHttpResponse getMockDefaultFailureResponse() {
      return new BasicHttpResponse(HttpStatus.SC_SERVICE_UNAVAILABLE,null,null);
    }

    @Override
    protected String getJamBaseURL() throws ServiceApplicationException {
      return JAM_BASE_URL;
    }
    
    @Override
    protected String getAccessToken() throws ServiceApplicationException {
      return ACCESS_TOKEN;
    }
  }
}