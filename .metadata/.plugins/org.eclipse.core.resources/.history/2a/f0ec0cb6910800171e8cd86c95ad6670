package org.eclipse.jdt.internal.ui.wizards.buildpaths;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.jdt.core.IJavaElement;
import org.eclipse.jdt.core.IJavaProject;
import org.eclipse.jdt.core.IPackageFragmentRoot;
import org.eclipse.jdt.internal.ui.JavaPlugin;
import org.eclipse.jdt.internal.ui.wizards.NewElementWizard;

public abstract class BuildPathWizard extends NewElementWizard implements IBuildPathWizard {
	private boolean fDoFlushChange;

	private final CPListElement fEntryToEdit;

	private IPackageFragmentRoot fPackageFragmentRoot;

	private IPath fOutputLocation;

	private final ArrayList fExistingEntries;

	public BuildPathWizard(CPListElement[] existingEntries, CPListElement newEntry, IPath outputLocation, String titel, ImageDescriptor image) {
		fOutputLocation= outputLocation;
		if (image != null)
			setDefaultPageImageDescriptor(image);
		setDialogSettings(JavaPlugin.getDefault().getDialogSettings());
		setWindowTitle(titel);
		fEntryToEdit= newEntry;
		fExistingEntries= new ArrayList(Arrays.asList(existingEntries));
		fDoFlushChange= true;
	}

	/** 
	* {@inheritDoc}
	*/
	protected void finishPage(IProgressMonitor monitor) throws InterruptedException, CoreException {
		if (fDoFlushChange) {
			IJavaProject javaProject= getEntryToEdit().getJavaProject();
			BuildPathsBlock.flush(getExistingEntries(), getOutputLocation(), javaProject, null, monitor);
			IProject project= javaProject.getProject();
			IPath path= getEntryToEdit().getPath();
			IResource folder= project.getWorkspace().getRoot().findMember(path);
			fPackageFragmentRoot= javaProject.getPackageFragmentRoot(folder);
		}
	}

	/** 
	* {@inheritDoc}
	*/
	@Override
	public IJavaElement getCreatedElement() {
		return fPackageFragmentRoot;
	}

	@Override
	public void setDoFlushChange(boolean b) {
		fDoFlushChange= b;
	}

	@Override
	public ArrayList getExistingEntries() {
		return fExistingEntries;
	}

	@Override
	public IPath getOutputLocation() {
		return fOutputLocation;
	}

	protected void setOutputLocation(IPath outputLocation) {
		fOutputLocation= outputLocation;
	}

	protected CPListElement getEntryToEdit() {
		return fEntryToEdit;
	}

	@Override
	public List getInsertedElements() {
		return new ArrayList();
	}

	@Override
	public List getRemovedElements() {
		return new ArrayList();
	}

	@Override
	public List getModifiedElements() {
		ArrayList result= new ArrayList(1);
		result.add(fEntryToEdit);
		return result;
	}

	@Override
	public abstract void cancel();
}
