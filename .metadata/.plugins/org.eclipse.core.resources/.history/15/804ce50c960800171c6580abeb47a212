package org.eclipse.jdt.internal.corext.refactoring.rename;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.OperationCanceledException;
import org.eclipse.ltk.core.refactoring.Change;
import org.eclipse.ltk.core.refactoring.RefactoringStatus;
import org.eclipse.jdt.core.dom.AnnotationTypeDeclaration;
import org.eclipse.jdt.core.dom.EnumDeclaration;
import org.eclipse.jdt.core.dom.SimpleName;
import org.eclipse.jdt.core.dom.TypeDeclaration;
import org.eclipse.jdt.internal.ui.JavaPlugin;
import org.eclipse.jdt.internal.ui.viewsupport.BasicElementLabels;
import org.eclipse.jdt.internal.corext.refactoring.structure.ICompilationUnitRewrite;

public interface IRenameTypeParameterProcessor {
	Change getResult();

	boolean visit(final AnnotationTypeDeclaration node);

	boolean visit(final EnumDeclaration node);

	boolean visit(final SimpleName node);

	boolean visit(final TypeDeclaration node);

	int getSaveMode();

	RefactoringStatus checkInitialConditions(final IProgressMonitor monitor) throws CoreException, OperationCanceledException;

	RefactoringStatus checkNewElementName(final String name) throws CoreException;

	Change createChange(final IProgressMonitor monitor) throws CoreException, OperationCanceledException;

	String getCurrentElementName();

	Object[] getElements();

	String getIdentifier();

	Object getNewElement();

	String getProcessorName();

	boolean getUpdateReferences();

	boolean isApplicable();

	void setUpdateReferences(final boolean update);
}
