package org.eclipse.jdt.internal.ui.text.template.contentassist;

import org.eclipse.swt.SWT;
import org.eclipse.swt.events.DisposeEvent;
import org.eclipse.swt.events.DisposeListener;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.core.runtime.Assert;
import org.eclipse.jface.text.IInformationControl;
import org.eclipse.jface.text.IInformationControlCreator;
import org.eclipse.jface.text.IInformationControlCreatorExtension;
import org.eclipse.jdt.internal.ui.JavaPlugin;
import org.eclipse.jdt.internal.ui.text.java.hover.SourceViewerInformationControl;

public final class TemplateInformationControlCreator implements IInformationControlCreator, IInformationControlCreatorExtension, ITemplateInformationControlCreator {
	private ISourceViewerInformationControl fControl;

	/** 
	* The orientation to be used by this hover. Allowed values are: SWT#RIGHT_TO_LEFT or SWT#LEFT_TO_RIGHT
	* @since 3.2
	*/
	private int fOrientation;

	/** 
	* @param orientation the orientation, allowed values are: SWT#RIGHT_TO_LEFT or SWT#LEFT_TO_RIGHT
	*/
	public TemplateInformationControlCreator(int orientation) {
		Assert.isLegal(orientation == SWT.RIGHT_TO_LEFT || orientation == SWT.LEFT_TO_RIGHT);
		fOrientation= orientation;
	}

	@Override
	public IInformationControl createInformationControl(Shell parent) {
		fControl= new SourceViewerInformationControl(parent, false, fOrientation, JavaPlugin.getAdditionalInfoAffordanceString());
		fControl.addDisposeListener(new DisposeListener() {
			public void widgetDisposed(DisposeEvent e) {
				fControl= null;
			}
		});
		return fControl;
	}

	@Override
	public boolean canReuse(IInformationControl control) {
		return fControl == control && fControl != null;
	}

	@Override
	public boolean canReplace(IInformationControlCreator creator) {
		return (creator != null && getClass() == creator.getClass());
	}
}
