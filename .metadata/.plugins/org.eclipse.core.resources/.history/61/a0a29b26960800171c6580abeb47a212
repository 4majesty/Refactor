package org.eclipse.jdt.internal.corext.refactoring.typeconstraints;

import org.eclipse.jdt.core.dom.ArrayInitializer;
import org.eclipse.jdt.core.dom.Assignment;
import org.eclipse.jdt.core.dom.CastExpression;
import org.eclipse.jdt.core.dom.CatchClause;
import org.eclipse.jdt.core.dom.ClassInstanceCreation;
import org.eclipse.jdt.core.dom.ConditionalExpression;
import org.eclipse.jdt.core.dom.ConstructorInvocation;
import org.eclipse.jdt.core.dom.FieldAccess;
import org.eclipse.jdt.core.dom.FieldDeclaration;
import org.eclipse.jdt.core.dom.InstanceofExpression;
import org.eclipse.jdt.core.dom.MethodDeclaration;
import org.eclipse.jdt.core.dom.MethodInvocation;
import org.eclipse.jdt.core.dom.ParenthesizedExpression;
import org.eclipse.jdt.core.dom.QualifiedName;
import org.eclipse.jdt.core.dom.ReturnStatement;
import org.eclipse.jdt.core.dom.SingleVariableDeclaration;
import org.eclipse.jdt.core.dom.SuperConstructorInvocation;
import org.eclipse.jdt.core.dom.SuperFieldAccess;
import org.eclipse.jdt.core.dom.SuperMethodInvocation;
import org.eclipse.jdt.core.dom.ThisExpression;
import org.eclipse.jdt.core.dom.VariableDeclaration;
import org.eclipse.jdt.core.dom.VariableDeclarationExpression;
import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
import org.eclipse.jdt.core.dom.VariableDeclarationStatement;
import org.eclipse.jdt.internal.corext.dom.ASTNodes;
import org.eclipse.jdt.internal.corext.dom.Bindings;
import org.eclipse.jdt.internal.corext.refactoring.rename.MethodChecks;

public interface IFullConstraintCreator {
	IContext getContext();

	void setContext(IContext context);

	ITypeConstraintFactory getConstraintFactory();

	IConstraintVariableFactory getConstraintVariableFactory();

	ITypeConstraint[] create(ArrayInitializer arrayInitializer);

	ITypeConstraint[] create(Assignment assignment);

	ITypeConstraint[] create(CastExpression castExpression);

	ITypeConstraint[] create(CatchClause node);

	ITypeConstraint[] create(ClassInstanceCreation instanceCreation);

	ITypeConstraint[] create(ConstructorInvocation invocation);

	ITypeConstraint[] create(FieldAccess access);

	ITypeConstraint[] create(FieldDeclaration fd);

	ITypeConstraint[] create(InstanceofExpression instanceofExpression);

	ITypeConstraint[] create(ConditionalExpression node);

	ITypeConstraint[] create(MethodDeclaration declaration);

	ITypeConstraint[] create(ParenthesizedExpression node);

	ITypeConstraint[] create(MethodInvocation invocation);

	ITypeConstraint[] create(QualifiedName qualifiedName);

	ITypeConstraint[] create(ReturnStatement returnStatement);

	ITypeConstraint[] create(SingleVariableDeclaration svd);

	ITypeConstraint[] create(SuperConstructorInvocation invocation);

	ITypeConstraint[] create(SuperFieldAccess access);

	ITypeConstraint[] create(SuperMethodInvocation invocation);

	ITypeConstraint[] create(ThisExpression expression);

	ITypeConstraint[] create(VariableDeclarationExpression vde);

	ITypeConstraint[] create(VariableDeclarationFragment vdf);

	ITypeConstraint[] create(VariableDeclarationStatement vds);
}
