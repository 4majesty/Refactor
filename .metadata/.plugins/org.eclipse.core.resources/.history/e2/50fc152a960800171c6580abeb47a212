package org.eclipse.jdt.internal.corext.refactoring.sef;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.ltk.core.refactoring.Change;
import org.eclipse.ltk.core.refactoring.RefactoringStatus;
import org.eclipse.jdt.core.IField;
import org.eclipse.jdt.internal.corext.refactoring.JavaRefactoringArguments;
import org.eclipse.jdt.internal.ui.JavaPlugin;
import org.eclipse.jdt.internal.ui.viewsupport.BasicElementLabels;
import org.eclipse.jdt.internal.ui.viewsupport.BindingLabelProvider;
import org.eclipse.jdt.internal.corext.refactoring.util.ITextChangeManager;

public interface ISelfEncapsulateFieldRefactoring {
	void reinitialize();

	IField getField();

	String getGetterName();

	void setGetterName(String name);

	String getSetterName();

	void setSetterName(String name);

	void setInsertionIndex(int index);

	int getVisibility();

	void setVisibility(int visibility);

	void setEncapsulateDeclaringClass(boolean encapsulateDeclaringClass);

	boolean getEncapsulateDeclaringClass();

	boolean getGenerateJavadoc();

	void setGenerateJavadoc(boolean value);

	RefactoringStatus checkInitialConditions(IProgressMonitor pm) throws CoreException;

	RefactoringStatus checkMethodNames();

	RefactoringStatus checkMethodNames(boolean usingLocalGetter, boolean usingLocalSetter);

	RefactoringStatus checkFinalConditions(IProgressMonitor pm) throws CoreException;

	Change createChange(IProgressMonitor pm) throws CoreException;

	String getName();

	RefactoringStatus initialize(JavaRefactoringArguments arguments);

	boolean isUsingLocalGetter();

	boolean isUsingLocalSetter();

	boolean isConsiderVisibility();

	void setConsiderVisibility(boolean considerVisibility);
}
