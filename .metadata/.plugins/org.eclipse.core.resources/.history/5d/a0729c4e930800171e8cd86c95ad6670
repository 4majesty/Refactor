package org.eclipse.jdt.internal.ui.preferences;

import java.util.Map;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Control;
import org.eclipse.core.runtime.IAdaptable;
import org.eclipse.core.resources.IProject;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.preferences.IWorkbenchPreferenceContainer;
import org.eclipse.jdt.internal.ui.IJavaHelpContextIds;
import org.eclipse.jdt.internal.ui.JavaPlugin;

/** 
 * Page used to configure both workspace and project specific compiler settings
 */
public class ProblemSeveritiesPreferencePage extends PropertyAndPreferencePage implements IProblemSeveritiesPreferencePage {
	public static final String PREF_ID= "org.eclipse.jdt.ui.preferences.ProblemSeveritiesPreferencePage";

	public static final String PROP_ID= "org.eclipse.jdt.ui.propertyPages.ProblemSeveritiesPreferencePage";

	public static final String DATA_SELECT_OPTION_KEY= "select_option_key";

	public static final String DATA_SELECT_OPTION_QUALIFIER= "select_option_qualifier";

	/** 
	* Key for a Boolean value defining if 'use project specific settings' should be enabled or not.
	*/
	public static final String USE_PROJECT_SPECIFIC_OPTIONS= "use_project_specific_key";

	private ProblemSeveritiesConfigurationBlock fConfigurationBlock;

	public ProblemSeveritiesPreferencePage() {
		setPreferenceStore(JavaPlugin.getDefault().getPreferenceStore());
		setTitle(PreferencesMessages.ProblemSeveritiesPreferencePage_title);
	}

	@Override
	public void createControl(Composite parent) {
		IWorkbenchPreferenceContainer container= (IWorkbenchPreferenceContainer)getContainer();
		fConfigurationBlock= new ProblemSeveritiesConfigurationBlock(getNewStatusChangedListener(), getProject(), container);
		super.createControl(parent);
		if (isProjectPreferencePage()) {
			PlatformUI.getWorkbench().getHelpSystem().setHelp(getControl(), IJavaHelpContextIds.PROBLEM_SEVERITIES_PROPERTY_PAGE);
		} else {
			PlatformUI.getWorkbench().getHelpSystem().setHelp(getControl(), IJavaHelpContextIds.PROBLEM_SEVERITIES_PREFERENCE_PAGE);
		}
	}

	protected Control createPreferenceContent(Composite composite) {
		return fConfigurationBlock.createContents(composite);
	}

	protected boolean hasProjectSpecificOptions(IProject project) {
		return fConfigurationBlock.hasProjectSpecificOptions(project);
	}

	protected String getPreferencePageID() {
		return PREF_ID;
	}

	protected String getPropertyPageID() {
		return PROP_ID;
	}

	@Override
	public void dispose() {
		if (fConfigurationBlock != null) {
			fConfigurationBlock.dispose();
		}
		super.dispose();
	}

	protected void enableProjectSpecificSettings(boolean useProjectSpecificSettings) {
		super.enableProjectSpecificSettings(useProjectSpecificSettings);
		if (fConfigurationBlock != null) {
			fConfigurationBlock.useProjectSpecificSettings(useProjectSpecificSettings);
		}
	}

	protected void performDefaults() {
		super.performDefaults();
		if (fConfigurationBlock != null) {
			fConfigurationBlock.performDefaults();
		}
	}

	@Override
	public boolean performOk() {
		if (fConfigurationBlock != null && !fConfigurationBlock.performOk()) {
			return false;
		}
		return super.performOk();
	}

	@Override
	public void performApply() {
		if (fConfigurationBlock != null) {
			fConfigurationBlock.performApply();
		}
	}

	@Override
	public void applyData(Object data) {
		super.applyData(data);
		if (data instanceof Map && fConfigurationBlock != null) {
			Map map= (Map)data;
			Boolean useProjectOptions= (Boolean)map.get(USE_PROJECT_SPECIFIC_OPTIONS);
			if (useProjectOptions != null) {
				enableProjectSpecificSettings(useProjectOptions.booleanValue());
			}
			Object key= map.get(DATA_SELECT_OPTION_KEY);
			Object qualifier= map.get(DATA_SELECT_OPTION_QUALIFIER);
			if (key instanceof String && qualifier instanceof String) {
				fConfigurationBlock.selectOption((String)key, (String)qualifier);
			}
		}
	}

	@Override
	public void setElement(IAdaptable element) {
		super.setElement(element);
		setDescription(null);
	}
}
