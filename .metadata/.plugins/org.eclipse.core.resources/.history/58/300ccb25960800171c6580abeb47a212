package org.eclipse.jdt.internal.corext.refactoring.reorg;

import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import org.eclipse.core.runtime.Assert;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IProgressMonitor;
import org.eclipse.core.runtime.OperationCanceledException;
import org.eclipse.core.resources.IResource;
import org.eclipse.ltk.core.refactoring.Change;
import org.eclipse.ltk.core.refactoring.ChangeDescriptor;
import org.eclipse.ltk.core.refactoring.CompositeChange;
import org.eclipse.ltk.core.refactoring.RefactoringStatus;
import org.eclipse.ltk.core.refactoring.TextEditBasedChange;
import org.eclipse.ltk.core.refactoring.participants.CheckConditionsContext;
import org.eclipse.ltk.core.refactoring.participants.MoveProcessor;
import org.eclipse.ltk.core.refactoring.participants.RefactoringParticipant;
import org.eclipse.ltk.core.refactoring.participants.SharableParticipants;
import org.eclipse.jdt.core.IJavaElement;
import org.eclipse.jdt.core.JavaModelException;
import org.eclipse.jdt.internal.corext.refactoring.JavaRefactoringArguments;
import org.eclipse.jdt.internal.corext.refactoring.RefactoringCoreMessages;
import org.eclipse.jdt.internal.corext.refactoring.changes.DynamicValidationStateChange;
import org.eclipse.jdt.internal.corext.refactoring.participants.JavaProcessors;
import org.eclipse.jdt.internal.corext.refactoring.participants.ResourceProcessors;
import org.eclipse.jdt.internal.corext.refactoring.reorg.IReorgPolicy.IMovePolicy;
import org.eclipse.jdt.internal.corext.refactoring.tagging.IQualifiedNameUpdating;
import org.eclipse.jdt.internal.corext.util.Resources;
import org.eclipse.jdt.ui.refactoring.IRefactoringProcessorIds;

public interface IJavaMoveProcessor {
	boolean canChildrenBeDestinations(IReorgDestination destination);

	boolean canElementBeDestination(IReorgDestination destination);

	boolean canEnableQualifiedNameUpdating();

	boolean canUpdateQualifiedNames();

	boolean canUpdateJavaReferences();

	RefactoringStatus checkFinalConditions(IProgressMonitor pm, CheckConditionsContext context) throws CoreException;

	RefactoringStatus checkInitialConditions(IProgressMonitor pm) throws CoreException;

	Change createChange(IProgressMonitor pm) throws CoreException;

	Object getCommonParentForInputElements();

	ICreateTargetQuery getCreateTargetQuery();

	Object[] getElements();

	String getFilePatterns();

	String getIdentifier();

	IJavaElement[] getJavaElements();

	String getProcessorName();

	IResource[] getResources();

	boolean getUpdateQualifiedNames();

	boolean getUpdateReferences();

	boolean hasAllInputSet();

	boolean hasDestinationSet();

	boolean isApplicable();

	boolean isTextualMove();

	RefactoringParticipant[] loadParticipants(RefactoringStatus status, SharableParticipants shared) throws CoreException;

	Change postCreateChange(Change[] participantChanges, IProgressMonitor pm) throws CoreException;

	void setCreateTargetQueries(ICreateTargetQueries queries);

	RefactoringStatus setDestination(IReorgDestination destination) throws JavaModelException;

	void setFilePatterns(String patterns);

	void setReorgQueries(IReorgQueries queries);

	void setUpdateQualifiedNames(boolean update);

	void setUpdateReferences(boolean update);

	boolean wasCanceled();

	int getSaveMode();
}
