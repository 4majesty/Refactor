package org.eclipse.jdt.internal.corext.refactoring.typeconstraints2;

import org.eclipse.jdt.core.ICompilationUnit;
import org.eclipse.jdt.core.dom.ITypeBinding;
import org.eclipse.jdt.internal.corext.refactoring.typeconstraints.types.TypeVariable;

public final class CollectionElementVariable2 extends ConstraintVariable2 implements ICollectionElementVariable2 {
	public static final int NOT_DECLARED_TYPE_VARIABLE_INDEX= -1;

	private final ConstraintVariable2 fParentCv;

	private final String fTypeVariableKey;

	private final int fDeclarationTypeVariableIndex;

	/** 
	* @param parentCv the parent constraint variable
	* @param typeVariable the type variable for this constraint
	* @param declarationTypeVariableIndex
	*/
	public CollectionElementVariable2(ConstraintVariable2 parentCv, ITypeBinding typeVariable, int declarationTypeVariableIndex) {
		super(null);
		fParentCv= parentCv;
		if (!typeVariable.isTypeVariable())
			throw new IllegalArgumentException(typeVariable.toString());
		fTypeVariableKey= typeVariable.getKey();
		fDeclarationTypeVariableIndex= declarationTypeVariableIndex;
	}

	public CollectionElementVariable2(ConstraintVariable2 parentCv, TypeVariable typeVariable, int declarationTypeVariableIndex) {
		super(null);
		fParentCv= parentCv;
		fTypeVariableKey= typeVariable.getBindingKey();
		fDeclarationTypeVariableIndex= declarationTypeVariableIndex;
	}

	@Override
	public int hashCode() {
		return fParentCv.hashCode() ^ fTypeVariableKey.hashCode();
	}

	@Override
	public boolean equals(Object other) {
		if (this == other)
			return true;
		if (other.getClass() != CollectionElementVariable2.class)
			return false;
		CollectionElementVariable2 other2= (CollectionElementVariable2)other;
		return fParentCv == other2.fParentCv && fTypeVariableKey.equals(other2.fTypeVariableKey);
	}

	@Override
	public int getDeclarationTypeVariableIndex() {
		return fDeclarationTypeVariableIndex;
	}

	@Override
	public ConstraintVariable2 getParentConstraintVariable() {
		return fParentCv;
	}

	@Override
	public ICompilationUnit getCompilationUnit() {
		if (fParentCv instanceof ISourceConstraintVariable)
			return ((ISourceConstraintVariable)fParentCv).getCompilationUnit();
		else
			return null;
	}

	@Override
	public String toString() {
		return "Elem[" + fParentCv.toString() + ", " + fTypeVariableKey + "]";
	}
}
