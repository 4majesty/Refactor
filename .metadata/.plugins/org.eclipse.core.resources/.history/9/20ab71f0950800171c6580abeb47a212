package org.eclipse.jdt.internal.corext.refactoring.structure.constraints;

import org.eclipse.core.runtime.Assert;
import org.eclipse.jdt.internal.corext.refactoring.typeconstraints2.ConstraintVariable2;
import org.eclipse.jdt.internal.corext.refactoring.typeconstraints2.ITypeConstraint2;

/** 
 * Type constraint which models covariance-related types.
 */
public final class CovariantTypeConstraint implements ITypeConstraint2, ICovariantTypeConstraint {
	/** 
	* The ancestor type 
	*/
	private final IConstraintVariable2 fAncestor;

	/** 
	* The descendant type 
	*/
	private final IConstraintVariable2 fDescendant;

	/** 
	* Creates a new covariant type constraint.
	* @param descendant the descendant type
	* @param ancestor the ancestor type
	*/
	public CovariantTypeConstraint(final ConstraintVariable2 descendant, final ConstraintVariable2 ancestor) {
		Assert.isNotNull(descendant);
		Assert.isNotNull(ancestor);
		fDescendant= descendant;
		fAncestor= ancestor;
	}

	@Override
	public final boolean equals(final Object object) {
		if (object.getClass() != CovariantTypeConstraint.class)
			return false;
		final ITypeConstraint2 other= (ITypeConstraint2)object;
		return getLeft() == other.getLeft() && getRight() == other.getRight();
	}

	@Override
	public final ConstraintVariable2 getLeft() {
		return fDescendant;
	}

	@Override
	public final ConstraintVariable2 getRight() {
		return fAncestor;
	}

	@Override
	public final int hashCode() {
		return fDescendant.hashCode() ^ 35 * fAncestor.hashCode();
	}

	@Override
	public final String toString() {
		return fDescendant.toString() + " <<= " + fAncestor.toString();
	}
}
