package com.successfactors.cdp.service.mentoring.jam.impl;

import java.io.IOException;
import java.io.StringReader;
import java.util.List;

import javax.inject.Inject;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.apache.http.HttpStatus;
import org.apache.http.message.BasicNameValuePair;
import org.jboss.seam.annotations.In;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import com.sf.sfv4.util.StringUtils;
import com.successfactors.cdp.service.mentoring.jam.GetJamSingleUseToken;
import com.successfactors.cdp.service.mentoring.jam.util.BasicHttpResponse;
import com.successfactors.cdp.service.mentoring.jam.util.SingleUseTokenConstants;
import com.successfactors.platform.bean.ParamBean;
import com.successfactors.sca.ServiceApplicationException;
import com.successfactors.sca.ServiceCommandHandler;
import com.successfactors.sca.ServiceCommandImpl;
import com.successfactors.sca.config.Service;

@Service
public class GetJamSingleUseTokenImpl extends AbstractJamService 
              implements ServiceCommandImpl<String, GetJamSingleUseToken>, SingleUseTokenConstants {

  /** param bean. */
  @Inject
  @In
  protected ParamBean params;

  /** scaHandler. */
  @Inject
  @In
  protected ServiceCommandHandler scaHandler;

  @Override
  public String execute(GetJamSingleUseToken cmd) throws ServiceApplicationException {
    String url = getAuthTokenURL();

    List<BasicNameValuePair> requestHeaders = getHeaderContent(cmd.getAccessToken());

    BasicHttpResponse response = invoke(url, REQUEST_TYPE_POST, requestHeaders);

    if (!isSuccess(response)) {
      throw new ServiceApplicationException("Failed to get Single Use Token for login user:" + params.getUserId()
                                            + "; Jam Response Code = " + response.getResponseCode()
                                            + " Jam Error Description = " + getPayload(response));
    }

    return getToken(response);
  }

  /**
   * Fetches Auth Token URL
   * 
   * @return createGroupURL String
   */
  private String getAuthTokenURL() throws ServiceApplicationException {
    StringBuilder urlBuilder = new StringBuilder();

    urlBuilder.append(getJamBaseURL()).append(SINGLE_USE_TOKEN_API_URL);

    return urlBuilder.toString();
  }

  private String getToken(BasicHttpResponse response) throws ServiceApplicationException {
    String token = "";

    try {
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        DocumentBuilder db = dbf.newDocumentBuilder();
        InputSource is = new InputSource(new StringReader(getPayload(response)));

        Document doc = db.parse(is);
        NodeList nodes = doc.getElementsByTagName(ELEMENT_SINGLE_USE_TOKEN);

        if (nodes != null 
             && nodes.getLength() > 0) {
            Node node = nodes.item(0);

            if(node != null) {
              Element element = (Element)node;
  
              token = element.getAttribute(ATTRIBUTE_ID);

              if(StringUtils.isEmpty(token)) {
                throw new ServiceApplicationException("Unable to fetch token from "
                    + "single-use-token response:"+getPayload(response));
              }
            } else {
              throw new ServiceApplicationException("Unable to fetch token from "
                  + "single-use-token response:"+getPayload(response));
            }
        } else {
          throw new ServiceApplicationException("Unable to fetch token from "
              + "single-use-token response:"+getPayload(response));
        }
      } catch (ParserConfigurationException pe) {
        throw new ServiceApplicationException(pe);
      } catch (SAXException se) {
        throw new ServiceApplicationException(se);
      } catch (IOException ie) {
        throw new ServiceApplicationException(ie);
      }

      return token;
  }

  private boolean isSuccess(BasicHttpResponse response) {
    return (response.getResponseCode() == HttpStatus.SC_CREATED);
  }

  @Override
  public ServiceCommandHandler getSCAHandler() {
    return scaHandler;
  }

  @Override
  public ParamBean getParams() {
    return params;
  }
}