package org.eclipse.jdt.internal.corext.refactoring.code.flow;

import org.eclipse.jface.text.IRegion;
import org.eclipse.jdt.core.dom.AnnotationTypeDeclaration;
import org.eclipse.jdt.core.dom.AnnotationTypeMemberDeclaration;
import org.eclipse.jdt.core.dom.AnonymousClassDeclaration;
import org.eclipse.jdt.core.dom.ArrayAccess;
import org.eclipse.jdt.core.dom.ArrayCreation;
import org.eclipse.jdt.core.dom.ArrayInitializer;
import org.eclipse.jdt.core.dom.ArrayType;
import org.eclipse.jdt.core.dom.AssertStatement;
import org.eclipse.jdt.core.dom.Assignment;
import org.eclipse.jdt.core.dom.Block;
import org.eclipse.jdt.core.dom.BooleanLiteral;
import org.eclipse.jdt.core.dom.BreakStatement;
import org.eclipse.jdt.core.dom.CastExpression;
import org.eclipse.jdt.core.dom.CatchClause;
import org.eclipse.jdt.core.dom.CharacterLiteral;
import org.eclipse.jdt.core.dom.ClassInstanceCreation;
import org.eclipse.jdt.core.dom.CompilationUnit;
import org.eclipse.jdt.core.dom.ConditionalExpression;
import org.eclipse.jdt.core.dom.ConstructorInvocation;
import org.eclipse.jdt.core.dom.ContinueStatement;
import org.eclipse.jdt.core.dom.DoStatement;
import org.eclipse.jdt.core.dom.EmptyStatement;
import org.eclipse.jdt.core.dom.EnhancedForStatement;
import org.eclipse.jdt.core.dom.EnumConstantDeclaration;
import org.eclipse.jdt.core.dom.EnumDeclaration;
import org.eclipse.jdt.core.dom.ExpressionStatement;
import org.eclipse.jdt.core.dom.FieldAccess;
import org.eclipse.jdt.core.dom.FieldDeclaration;
import org.eclipse.jdt.core.dom.ForStatement;
import org.eclipse.jdt.core.dom.IBinding;
import org.eclipse.jdt.core.dom.IMethodBinding;
import org.eclipse.jdt.core.dom.ITypeBinding;
import org.eclipse.jdt.core.dom.IVariableBinding;
import org.eclipse.jdt.core.dom.IfStatement;
import org.eclipse.jdt.core.dom.ImportDeclaration;
import org.eclipse.jdt.core.dom.InfixExpression;
import org.eclipse.jdt.core.dom.Initializer;
import org.eclipse.jdt.core.dom.InstanceofExpression;
import org.eclipse.jdt.core.dom.Javadoc;
import org.eclipse.jdt.core.dom.LabeledStatement;
import org.eclipse.jdt.core.dom.MarkerAnnotation;
import org.eclipse.jdt.core.dom.MemberValuePair;
import org.eclipse.jdt.core.dom.MethodDeclaration;
import org.eclipse.jdt.core.dom.MethodInvocation;
import org.eclipse.jdt.core.dom.Name;
import org.eclipse.jdt.core.dom.NormalAnnotation;
import org.eclipse.jdt.core.dom.NullLiteral;
import org.eclipse.jdt.core.dom.NumberLiteral;
import org.eclipse.jdt.core.dom.PackageDeclaration;
import org.eclipse.jdt.core.dom.ParameterizedType;
import org.eclipse.jdt.core.dom.ParenthesizedExpression;
import org.eclipse.jdt.core.dom.PostfixExpression;
import org.eclipse.jdt.core.dom.PrefixExpression;
import org.eclipse.jdt.core.dom.PrimitiveType;
import org.eclipse.jdt.core.dom.QualifiedName;
import org.eclipse.jdt.core.dom.QualifiedType;
import org.eclipse.jdt.core.dom.ReturnStatement;
import org.eclipse.jdt.core.dom.SimpleName;
import org.eclipse.jdt.core.dom.SimpleType;
import org.eclipse.jdt.core.dom.SingleMemberAnnotation;
import org.eclipse.jdt.core.dom.SingleVariableDeclaration;
import org.eclipse.jdt.core.dom.Statement;
import org.eclipse.jdt.core.dom.StringLiteral;
import org.eclipse.jdt.core.dom.SuperConstructorInvocation;
import org.eclipse.jdt.core.dom.SuperFieldAccess;
import org.eclipse.jdt.core.dom.SuperMethodInvocation;
import org.eclipse.jdt.core.dom.SwitchCase;
import org.eclipse.jdt.core.dom.SwitchStatement;
import org.eclipse.jdt.core.dom.SynchronizedStatement;
import org.eclipse.jdt.core.dom.ThisExpression;
import org.eclipse.jdt.core.dom.ThrowStatement;
import org.eclipse.jdt.core.dom.TryStatement;
import org.eclipse.jdt.core.dom.TypeDeclaration;
import org.eclipse.jdt.core.dom.TypeDeclarationStatement;
import org.eclipse.jdt.core.dom.TypeLiteral;
import org.eclipse.jdt.core.dom.TypeParameter;
import org.eclipse.jdt.core.dom.VariableDeclarationExpression;
import org.eclipse.jdt.core.dom.VariableDeclarationFragment;
import org.eclipse.jdt.core.dom.VariableDeclarationStatement;
import org.eclipse.jdt.core.dom.WhileStatement;
import org.eclipse.jdt.core.dom.WildcardType;
import org.eclipse.jdt.internal.corext.dom.GenericVisitor;

public interface IFlowAnalyzer {
	void setHasDefaultCase();

	boolean hasDefaultCase();

	void add(IRegion range, FlowInfo info);

	IRegion[] getRanges();

	FlowInfo[] getInfos();

	FlowInfo getInfo(int index);

	boolean visit(EmptyStatement node);

	boolean visit(TryStatement node);

	void endVisit(AnnotationTypeDeclaration node);

	void endVisit(AnnotationTypeMemberDeclaration node);

	void endVisit(AnonymousClassDeclaration node);

	void endVisit(ArrayAccess node);

	void endVisit(ArrayCreation node);

	void endVisit(ArrayInitializer node);

	void endVisit(ArrayType node);

	void endVisit(AssertStatement node);

	void endVisit(Assignment node);

	void endVisit(Block node);

	void endVisit(BooleanLiteral node);

	void endVisit(BreakStatement node);

	void endVisit(CastExpression node);

	void endVisit(CatchClause node);

	void endVisit(CharacterLiteral node);

	void endVisit(ClassInstanceCreation node);

	void endVisit(CompilationUnit node);

	void endVisit(ConditionalExpression node);

	void endVisit(ConstructorInvocation node);

	void endVisit(ContinueStatement node);

	void endVisit(DoStatement node);

	void endVisit(EmptyStatement node);

	void endVisit(EnhancedForStatement node);

	void endVisit(EnumConstantDeclaration node);

	void endVisit(EnumDeclaration node);

	void endVisit(ExpressionStatement node);

	void endVisit(FieldAccess node);

	void endVisit(FieldDeclaration node);

	void endVisit(ForStatement node);

	void endVisit(IfStatement node);

	void endVisit(ImportDeclaration node);

	void endVisit(InfixExpression node);

	void endVisit(InstanceofExpression node);

	void endVisit(Initializer node);

	void endVisit(Javadoc node);

	void endVisit(LabeledStatement node);

	void endVisit(MarkerAnnotation node);

	void endVisit(MemberValuePair node);

	void endVisit(MethodDeclaration node);

	void endVisit(MethodInvocation node);

	void endVisit(NormalAnnotation node);

	void endVisit(NullLiteral node);

	void endVisit(NumberLiteral node);

	void endVisit(PackageDeclaration node);

	void endVisit(ParameterizedType node);

	void endVisit(ParenthesizedExpression node);

	void endVisit(PostfixExpression node);

	void endVisit(PrefixExpression node);

	void endVisit(PrimitiveType node);

	void endVisit(QualifiedName node);

	void endVisit(QualifiedType node);

	void endVisit(ReturnStatement node);

	void endVisit(SimpleName node);

	void endVisit(SimpleType node);

	void endVisit(SingleMemberAnnotation node);

	void endVisit(SingleVariableDeclaration node);

	void endVisit(StringLiteral node);

	void endVisit(SuperConstructorInvocation node);

	void endVisit(SuperFieldAccess node);

	void endVisit(SuperMethodInvocation node);

	void endVisit(SwitchCase node);

	void endVisit(SwitchStatement node);

	void endVisit(SynchronizedStatement node);

	void endVisit(ThisExpression node);

	void endVisit(ThrowStatement node);

	void endVisit(TryStatement node);

	void endVisit(TypeDeclaration node);

	void endVisit(TypeDeclarationStatement node);

	void endVisit(TypeLiteral node);

	void endVisit(TypeParameter node);

	void endVisit(VariableDeclarationExpression node);

	void endVisit(VariableDeclarationStatement node);

	void endVisit(VariableDeclarationFragment node);

	void endVisit(WhileStatement node);

	void endVisit(WildcardType node);
}
