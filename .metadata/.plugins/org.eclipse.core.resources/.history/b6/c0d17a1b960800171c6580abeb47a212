package org.eclipse.jdt.internal.corext.refactoring.reorg;

import org.eclipse.core.resources.IContainer;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IFolder;
import org.eclipse.core.resources.IResource;
import org.eclipse.jdt.core.ICompilationUnit;
import org.eclipse.jdt.core.IJavaElement;
import org.eclipse.jdt.core.IJavaProject;
import org.eclipse.jdt.core.IPackageFragment;
import org.eclipse.jdt.core.IPackageFragmentRoot;
import org.eclipse.jdt.internal.corext.refactoring.RefactoringCoreMessages;
import org.eclipse.jdt.internal.corext.refactoring.util.ResourceUtil;
import org.eclipse.jdt.internal.corext.util.Messages;
import org.eclipse.jdt.ui.JavaElementLabels;
import org.eclipse.jdt.internal.ui.viewsupport.BasicElementLabels;

public interface IOverwriteHelper {
	void setFiles(IFile[] files);

	void setFolders(IFolder[] folders);

	void setCus(ICompilationUnit[] cus);

	void setPackageFragmentRoots(IPackageFragmentRoot[] roots);

	void setPackages(IPackageFragment[] fragments);

	IFile[] getFilesWithoutUnconfirmedOnes();

	IFolder[] getFoldersWithoutUnconfirmedOnes();

	ICompilationUnit[] getCusWithoutUnconfirmedOnes();

	IPackageFragmentRoot[] getPackageFragmentRootsWithoutUnconfirmedOnes();

	IPackageFragment[] getPackagesWithoutUnconfirmedOnes();

	void confirmOverwriting(IReorgQueries reorgQueries, Object destination);
}
