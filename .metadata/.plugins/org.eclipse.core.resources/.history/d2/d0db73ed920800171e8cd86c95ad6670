package org.eclipse.jdt.internal.ui.callhierarchy;

import java.util.HashSet;
import org.eclipse.ui.PlatformUI;
import org.eclipse.jdt.core.IJavaProject;
import org.eclipse.jdt.core.IMember;
import org.eclipse.jdt.core.search.IJavaSearchScope;
import org.eclipse.jdt.core.search.SearchEngine;
import org.eclipse.jdt.internal.ui.IJavaHelpContextIds;
import org.eclipse.jdt.internal.ui.search.JavaSearchScopeFactory;

class SearchScopeProjectAction extends SearchScopeAction implements ISearchScopeProjectAction {
	private final SearchScopeActionGroup fGroup;

	public SearchScopeProjectAction(SearchScopeActionGroup group) {
		super(group, CallHierarchyMessages.SearchScopeActionGroup_project_text);
		this.fGroup= group;
		setToolTipText(CallHierarchyMessages.SearchScopeActionGroup_project_tooltip);
		PlatformUI.getWorkbench().getHelpSystem().setHelp(this, IJavaHelpContextIds.CALL_HIERARCHY_SEARCH_SCOPE_ACTION);
	}

	@Override
	public IJavaSearchScope getSearchScope() {
		IMember[] members= fGroup.getView().getInputElements();
		if (members == null) {
			return null;
		}
		HashSet projects= new HashSet();
		for (int i= 0; i < members.length; i++) {
			projects.add(members[i].getJavaProject());
		}
		return SearchEngine.createJavaSearchScope((IJavaProject[])projects.toArray(new IJavaProject[projects.size()]), JavaSearchScopeFactory.NO_PROJ);
	}

	@Override
	public int getSearchScopeType() {
		return SearchScopeActionGroup.SEARCH_SCOPE_TYPE_PROJECT;
	}

	@Override
	public String getFullDescription() {
		IMember[] members= fGroup.getView().getInputElements();
		if (members != null) {
			HashSet projectNames= new HashSet();
			for (int i= 0; i < members.length; i++) {
				projectNames.add(members[i].getJavaProject().getElementName());
			}
			JavaSearchScopeFactory factory= JavaSearchScopeFactory.getInstance();
			return factory.getProjectScopeDescription((String[])projectNames.toArray(new String[projectNames.size()]), JavaSearchScopeFactory.NO_PROJ);
		}
		return "";
	}
}
