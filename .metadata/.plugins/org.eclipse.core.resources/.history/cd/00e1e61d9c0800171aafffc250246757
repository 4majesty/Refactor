/**
 * This class has been generated by Fast Code Eclipse Plugin 
 * @author : ricardo.saito
 * Created : 11/29/2016 12:26:50
 */
package com.successfactors.cdp.service.mentoring.impl;

import static com.successfactors.unittest.TestUtils.setField;
import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertNotNull;

import java.io.UnsupportedEncodingException;
import java.security.NoSuchAlgorithmException;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import org.jmock.Expectations;
import org.jmock.Mockery;
import org.jmock.lib.legacy.ClassImposteriser;
import org.testng.Assert;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import com.successfactors.cdp.app.mentoring.MentoringServiceBase;
import com.successfactors.cdp.bean.mentoring.MentoringProgram;
import com.successfactors.cdp.bean.mentoring.MentoringProgramMatchedParticipant;
import com.successfactors.cdp.service.mentoring.SendMentoringProgramClosureEmail;
import com.successfactors.cdp.service.util.mentoring.MentorshipStatusEnum;
import com.successfactors.cdp.service.util.mentoring.email.MentoringEmailContent;
import com.successfactors.cdp.service.util.mentoring.email.MentoringEmailUtils;
import com.successfactors.genericobject.api.model.ObjectDefinition;
import com.successfactors.genericobject.app.datamodel.ConfigurationProvider;
import com.successfactors.genericobject.service.LoadByObjectTypeExternalCode;
import com.successfactors.i18n.service.IMessageBundle;
import com.successfactors.platform.bean.MailInvalidAddressException;
import com.successfactors.platform.bean.MailSendException;
import com.successfactors.platform.bean.ParamBean;
import com.successfactors.sca.ServiceApplicationException;
import com.successfactors.sca.ServiceCommandHandler;
import com.successfactors.user.bean.UserBean;
import com.successfactors.user.bean.impl.UserBeanImpl;

public class SendMentoringProgramClosureEmailImplTest  {  
  private Mockery context;

  private SendMentoringProgramClosureEmailImpl service;

  private ParamBean params;

  private IMentoringEmailUtils mentoringEmailUtils;

  private IMessageBundle msgs;

  private MentoringServiceBase mentoringServiceBase;

  private ConfigurationProvider configurationProvider;

  private ServiceCommandHandler scaHandler;

  
  final public ParamBean getDefaultParam() {
    if (params == null) {
        params = new ParamBean();
        params.setCompanyId("ABCINC");
        params.setUserId("user1");
        params.setDateFormat("mm/dd/yyyy");
        params.setLocale(Locale.ENGLISH);
    }
    return params;
  }
  
  @BeforeMethod(groups = { "checkin" })
  public void setUp() throws Exception {
    context = new Mockery();
    context.setImposteriser(ClassImposteriser.INSTANCE);
    this.service = new SendMentoringProgramClosureEmailImpl();
    this.params = this.getDefaultParam();
    this.mentoringEmailUtils = context.mock(MentoringEmailUtils.class);
    this.msgs = context.mock(IMessageBundle.class);
    this.mentoringServiceBase = context.mock(MentoringServiceBase.class);
    this.configurationProvider = context.mock(ConfigurationProvider.class);
    this.scaHandler = context.mock(ServiceCommandHandler.class);
    
    setField(service, "params", this.params);
    setField(service, "mentoringEmailUtils", this.mentoringEmailUtils);
    setField(service, "msgs", this.msgs);
    setField(service, "mentoringServiceBase", this.mentoringServiceBase);
    setField(service, "configurationProvider", this.configurationProvider);
    setField(service, "scaHandler", this.scaHandler);
  }
  
  @Test(groups = { "checkin" })
  public void testInvalidMentorship() throws ServiceApplicationException {
    context.checking(new Expectations() {
      {
        one(configurationProvider).getObjectDefinition(MentoringProgramMatchedParticipant.class);
        will(returnValue(createObjectDefinition()));
        one(scaHandler).execute(with(any(LoadByObjectTypeExternalCode.class)));
        will(returnValue(Collections.emptyList()));

      }

      private ObjectDefinition createObjectDefinition() {
        return context.mock(ObjectDefinition.class);
      }
    });
    SendMentoringProgramClosureEmail cmd = new SendMentoringProgramClosureEmail("1", "1", null, null, true);
    try {
      Void result = service.execute(cmd);
      Assert.fail();
    } catch (ServiceApplicationException expected) {
    }
    context.assertIsSatisfied();
  }
//  @Test(groups = { "checkin" })
  public void testSendClosureEmailMentorWithNote() throws ServiceApplicationException, NoSuchAlgorithmException, UnsupportedEncodingException, MailInvalidAddressException, MailSendException {
    context.checking(new Expectations() {
      {
        one(msgs).getString("DEVELOPMENT_MENTORING_CLOSURE_SUBJECT");
        will(returnValue("SUBJECT"));
        one(msgs).getString("DEVELOPMENT_MENTORING_CLOSURE_BODY");
        will(returnValue("BODY"));
        one(msgs).format(with(any(String.class)),  with(any(Object[].class)));
        will(returnValue("formatted"));
        
        allowing(mentoringEmailUtils).escapleHtmlTag(with(any(String.class)));
        will(returnValue("token"));
        
        allowing(mentoringEmailUtils).generateUrlToken(with(any(MentoringProgram.class)), with(any(UserBean.class)), with(any(String.class)));
        will(returnValue("http://"));
        
        allowing(mentoringEmailUtils).sendEmail(with(any(MentoringEmailContent.class)), with(any(Map.class)), with(any(UserBean.class)), with(any(UserBean[].class)));
      }
    });
    MentoringProgram program  = new MentoringProgram();
    MentoringProgramMatchedParticipant mentorship = new MentoringProgramMatchedParticipant();
    mentorship.setMentee("mentee");
    mentorship.setMentor("mentor");
    mentorship.setMentorshipStatus(MentorshipStatusEnum.CLOSED_BY_MENTEE);
    mentorship.setMentorshipClosureNote("<script>");

    Map<String, UserBean> beans = new HashMap<String, UserBean>();
    beans.put(params.getUserId(), new UserBeanImpl());
    beans.put("mentor", new UserBeanImpl());
    beans.put("mentee", new UserBeanImpl());
    
    service.sendEmail(program, mentorship, beans,"mentee", "mentor", true);
    context.assertIsSatisfied();
  }
  
//  @Test(groups = { "checkin" })
  public void testSendWithdrawEmailMentee() throws ServiceApplicationException, NoSuchAlgorithmException, UnsupportedEncodingException, MailInvalidAddressException, MailSendException {
    context.checking(new Expectations() {
      {
        one(msgs).getString("DEVELOPMENT_MENTORING_CLOSURE_SUBJECT");
        will(returnValue("SUBJECT"));
        one(msgs).getString("DEVELOPMENT_MENTORING_WITHDRAW_BODY");
        will(returnValue("BODY"));
        never(msgs).format(with(any(String.class)),  with(any(Object[].class)));
        
        allowing(mentoringEmailUtils).escapleHtmlTag(with(any(String.class)));
        will(returnValue("token"));
        allowing(mentoringEmailUtils).generateUrlToken(with(any(MentoringProgram.class)), with(any(UserBean.class)), with(any(String.class)));
        will(returnValue("http://"));
        
        allowing(mentoringEmailUtils).sendEmail(with(any(MentoringEmailContent.class)), with(any(Map.class)), with(any(UserBean.class)), with(any(UserBean[].class)));
      }
    });
    MentoringProgram program  = new MentoringProgram();
    MentoringProgramMatchedParticipant mentorship = new MentoringProgramMatchedParticipant();
    mentorship.setMentee("mentee");
    mentorship.setMentor("mentor");
    mentorship.setMentorshipStatus(MentorshipStatusEnum.CLOSED_BY_MENTOR);
    mentorship.setMentorshipClosureNote(null);

    Map<String, UserBean> beans = new HashMap<String, UserBean>();
    beans.put(params.getUserId(), new UserBeanImpl());
    beans.put("mentor", new UserBeanImpl());
    beans.put("mentee", new UserBeanImpl());
    
    service.sendEmail(program, mentorship, beans, "mentor", "mentee", false);
    context.assertIsSatisfied();
  }
  
  @Test(groups = { "checkin" })
  public void testSendEmailNoUser() throws ServiceApplicationException {
    MentoringProgram program  = new MentoringProgram();
    MentoringProgramMatchedParticipant mentorship = new MentoringProgramMatchedParticipant();
    Map<String, UserBean> beans = new HashMap<String, UserBean>();
    service.sendEmail(program, mentorship, beans, "nouser", "nouser", true);
    context.assertIsSatisfied();
  }
  
  @Test(groups = { "checkin" })
  public void testLoadUserBeans() throws ServiceApplicationException {
    context.checking(new Expectations() {
      {
        one(mentoringServiceBase).getUsernameMapByIds(with(any(List.class)));
        will(returnValue(Collections.emptyMap()));
      }
    });
    SendMentoringProgramClosureEmail sca = new SendMentoringProgramClosureEmail(null, null, "mentor", "mentee", true);
    
    Map<String,UserBean> map = service.loadUserBeans(sca);
    assertNotNull(map);
    Assert.assertTrue(map.isEmpty());
    context.assertIsSatisfied();
  }
  
  @Test(groups = { "checkin" })
  public void testEscape2HTML()  {
    String text = "Hello";
    String result = service.escape2HTML(text);
    
    assertEquals(result, text);
    
    text = "<script>";
    result = service.escape2HTML(text);
    assertEquals(result, "&lt;script&gt;");

    text = "newline\nnewline";
    result = service.escape2HTML(text);
    assertEquals(result, "newline<br/>newline");

  }
}