package com.successfactors.cdp.service.mentoring.jam.impl;

import java.util.Collections;
import java.util.Map;

import javax.inject.Inject;

import org.jboss.seam.annotations.In;

import com.successfactors.cdp.app.mentoring.MentoringServiceBase;
import com.successfactors.cdp.service.mentoring.jam.GetJamGoToGroupURL;
import com.successfactors.cdp.service.mentoring.jam.SendJamGroupPhotoFailureEmail;
import com.successfactors.cdp.service.mentoring.jam.util.JamUtil;
import com.successfactors.cdp.service.util.mentoring.email.MentoringEmailUtils;
import com.successfactors.logging.api.LogManager;
import com.successfactors.logging.api.Logger;
import com.successfactors.platform.bean.ParamBean;
import com.successfactors.platform.util.Messages;
import com.successfactors.sca.ServiceApplicationException;
import com.successfactors.sca.ServiceCommandHandler;
import com.successfactors.sca.ServiceCommandImpl;
import com.successfactors.sca.config.Service;
import com.successfactors.user.bean.UserBean;

@Service
public class SendJamGroupPhotoFailureEmailImpl implements ServiceCommandImpl<Void, SendJamGroupPhotoFailureEmail> {

  /** logger. */
  private static Logger log = LogManager.getLogger();

  @Inject
  @In
  private ParamBean params;

  /** v10msgs needed for PLT CommonEmailHelper  */
  @Inject
  @In
  private Messages v10msgs;

  @Inject
  @In(create=true)
  private IMentoringEmailUtils mentoringEmailUtils;
  
  @Inject
  @In(create=true)
  private MentoringServiceBase mentoringServiceBase;

  @Inject
  @In
  private ServiceCommandHandler scaHandler;

  @Override
  public Void execute(SendJamGroupPhotoFailureEmail cmd) throws ServiceApplicationException {
    UserBean recipientUser = getRecipient(params.getUserId());

    if (recipientUser == null) {
      throw new ServiceApplicationException("Empty user "+params.getUserId()+", unable to send failure email about JAM upload picture.");
    }

    String programName = mentoringEmailUtils.escapleHtmlTag(cmd.getProgram().getName());
    String subject = getSubject(programName);
    String goToGroupAliasURL = getGoToGroupAliasUrl(cmd.getProgram().getJamGroupId());
    String body = getBody(programName, goToGroupAliasURL);

    mentoringEmailUtils.sendEmail(subject, body, new UserBean[] {recipientUser}, v10msgs);

    return null;
  }

  private UserBean getRecipient(String userId) throws ServiceApplicationException {
    Map<String, UserBean> map = mentoringServiceBase.getUsernameMapByIds(Collections.singletonList(params.getUserId()));

    return map.get(params.getUserId());
  }

  private String getSubject(String programName) {
    return v10msgs.format("DEVELOPMENT_MENTORING_NOTIFICATION_EMAIL_SUBJECT", new Object[] {programName});
  }

  private String getBody(String programName, String goToGroupAliasURL) {
    return v10msgs.format("DEVELOPMENT_MENTORING_JAM_EMAIL_PHOTO_BODY", new Object[] {programName, goToGroupAliasURL});
  }

  private String getGoToGroupAliasUrl(String groupId) throws ServiceApplicationException {
    return JamUtil.getGoToJamGroupAliasUrl(scaHandler.execute(new GetJamGoToGroupURL(groupId)), v10msgs);
  }
}